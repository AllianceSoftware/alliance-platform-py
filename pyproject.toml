[project]
name = "alliance-platform"
version = "0.0.1"
dependencies = []
requires-python = ">=3.11"

[tool.setuptools]
py-modules = []

[tool.pdm.dev-dependencies]
dev = [
  "-e alliance-platform-frontend @ file:///${PROJECT_ROOT}/packages/ap-frontend",
  "-e alliance-platform-codegen @ file:///${PROJECT_ROOT}/packages/ap-codegen",
  "-e alliance-platform-core @ file:///${PROJECT_ROOT}/packages/ap-core",
  "-e alliance-platform-storage @ file:///${PROJECT_ROOT}/packages/ap-storage",
  "-e alliance-platform-audit @ file:///${PROJECT_ROOT}/packages/ap-audit",
  "-e alliance-platform-ui @ file:///${PROJECT_ROOT}/packages/ap-ui",
  "beautifulsoup4<5.0,>=4.11",
  "django-stubs",
  "djangorestframework-stubs",
  "logging-tree",
  "mypy>=1.3",
  "packaging",
  "psycopg2",
  "rules",
  "types-Werkzeug",
  "types-beautifulsoup4",
  "types-factory-boy",
  "types-psycopg2",
  "types-requests",
  "types-setuptools",
  "tox",
  "tox-pdm>=0.7.2",
  "ruff",
  "Pillow",
  "django-storages[s3]",
  "django-storages[azure]",
  "Django>=5.1",
  "django-hijack>=3.0.4",
]
docs = [
  "sphinx>=8.1",
  "sphinx-autobuild>=2024.10.3",
  "sphinx-autodoc-typehints>=2.5.0",
  "sphinx-rtd-theme>=3.0.0",
  "sphinx-multiproject>=1.0.0",
]

[tool.ruff]
line-length = 110
target-version = 'py311'

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I"]

[tool.ruff.lint.isort]
order-by-type = true
force-single-line = true
force-sort-within-sections = true

[tool.pdm.scripts]
frontend-test = { shell = "./manage.py test", working_dir = "packages/ap-frontend" }
frontend-mypy = { cmd = "mypy .", working_dir = "packages/ap-frontend" }

codegen-test = { shell = "./manage.py test", working_dir = "packages/ap-codegen" }
codegen-mypy = { cmd = "mypy .", working_dir = "packages/ap-codegen" }

core-test = { shell = "./manage.py test", working_dir = "packages/ap-core" }
core-mypy = { cmd = "mypy .", working_dir = "packages/ap-core" }

storage-test = { shell = "./manage.py test", working_dir = "packages/ap-storage" }
storage-mypy = { cmd = "mypy .", working_dir = "packages/ap-storage" }

audit-test = { shell = "./manage.py test", working_dir = "packages/ap-audit" }
audit-mypy = { cmd = "mypy .", working_dir = "packages/ap-audit" }

ui-test = { shell = "./manage.py test", working_dir = "packages/ap-ui" }
ui-mypy = { cmd = "mypy .", working_dir = "packages/ap-ui" }

test = { composite = ["frontend-test", "codegen-test", "core-test", "storage-test", "audit-test", "ui-test"], keep_going = true }

mypy = { composite = [
  "codegen-mypy",
  "frontend-mypy",
  "core-mypy",
  "storage-mypy",
  "audit-mypy",
  "ui-mypy",
], keep_going = true }

build-docs-watch.cmd = "./scripts/build-docs.sh"
