[tool.poetry]
name = "alliance-django-frontend"
version = "1.0.0"
description = "Django integration for Alliance UI React package"
repository = "https://github.com/AllianceSoftware/alliace-platform-python"
homepage = "https://github.com/AllianceSoftware/alliace-platform-python/packages/alliance-django-frontend"
documentation = "https://github.com/AllianceSoftware/d/packages/alliance-django-frontend/README.md"
authors = ["Alliance Software <support@alliancesoftware.com.au>"]
license = "BSD-2-Clause"
readme = "README.md"
packages = [
    { include = "alliance-django-frontend", from = "." },
]
include = [
    "CHANGELOG.md",
    "LICENSE",
]
keywords = [
    "django",
    "alliance",
    "alliancesoftware",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Intended Audience :: Developers",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Typing :: Typed",
]

[tool.poetry.urls]
issues = "https://github.com/AllianceSoftware/alliance-platform-python/issues"

[[tool.poetry.source]]
name = "test-pypi"
url = "https://test.pypi.org/simple/"
priority = "explicit"

[tool.poetry.dependencies]
# you need the <4.0 for cachetools which is a tox dependency
python = ">=3.10,<4.0"

Django = "^4.2.6"
djangorestframework = "*"
django-allianceutils = {version = "^4.0.0", source = "test-pypi"}
requests = "*"
packaging = "*"

typing_extensions = "^4.5.0"

# optional extras
isort = { version = ">=5", optional = true }
logging_tree = { version = "*", optional = true }
rules = { version = "*", optional = true }

[tool.poetry.extras]
extras = [
    "isort",
    "rules",
]
mysql = ["mysqlclient"]
postgres = ["psycopg2"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
beautifulsoup4 = "^4.11"
factory-boy = "*"

isort = ">=5"

mypy = ">=1.3"
django-stubs = "*"
djangorestframework-stubs = "*"
types-beautifulsoup4 = "*"
types-factory-boy = "*"
types-requests = "*"
types-Werkzeug = "*"

# ===================================================================================================================
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


# ===================================================================================================================
[tool.isort]
force_single_line = true
force_sort_within_sections = true
line_length = 110
order_by_type = false
skip_glob = [
    "*/.tox/*",
    "*/node_modules/*.py",
    "*/migrations/0*.py",
    "*/settings/*.py",
]
# stdlib that may be backported or not always there
extra_standard_library=[
    "pkg_resources",
    "setuptools",
    "typing",
]

# ===================================================================================================================

[tool.mypy]
python_version = "3.8"
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]
#exclude = ['/migrations/', 'bin/', 'venv/', '/tests/']
# mypy_path is needed because mypy won't look for config in ancestor dirs:
#  https://github.com/python/mypy/issues/3377#issuecomment-302308046
mypy_path = '$MYPY_CONFIG_FILE_DIR/src'
# default files to check if none given on command line
files = '$MYPY_CONFIG_FILE_DIR/src/**/*.py'


allow_redefinition = false
allow_untyped_globals = false
# ignore_missing_imports tells mypy to just not check 3rd party missing stubs
#   module = ["pghistory", "docutils", "PyPDF2", "OpenSSL", "pyppetter", "pgtrigger", "..."]
# is one workaround but it will fail whenever a new module gets enabled here. yikes.
#ignore_missing_imports = true
#module = [
#	"rules",
#]
ignore_missing_imports = false
check_untyped_defs = true
# disallow_any_unimported = true
# disallow_incomplete_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = true
# disallow_untyped_defs = true  # if you adopt this then will want to do it on a module-by-module basis
ignore_errors = false
implicit_optional = false
implicit_reexport = false
local_partial_types = true
show_error_codes = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_redundant_casts = true
# warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

#[tool.mypy-isort.*]
#module = [
#	"isort.*",
#	"rules",
#]
#ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "isort"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "isort.api"
no_implicit_reexport = false

[[tool.mypy.overrides]]
module = "logging_tree"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rules"
ignore_missing_imports = true

[tool.django-stubs]
django_settings_module = "test_allianceutils.settings"
