# Generated by Django 5.1.1 on 2024-11-13 04:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations
from django.db import models
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("pghistory", "0006_delete_aggregateevent"),
    ]

    operations = [
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "test_alliance_platform_audit_profile",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "test_alliance_platform_audit_custom_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AuthorProfile",
            fields=[
                (
                    "profile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="test_alliance_platform_audit.profile",
                    ),
                ),
                ("homepage", models.URLField()),
            ],
            options={
                "db_table": "test_alliance_platform_audit_author_profile",
            },
            bases=("test_alliance_platform_audit.profile",),
        ),
        migrations.CreateModel(
            name="MemberProfile",
            fields=[
                (
                    "profile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="test_alliance_platform_audit.profile",
                    ),
                ),
                ("member_id", models.IntegerField()),
            ],
            options={
                "db_table": "test_alliance_platform_audit_member_profile",
            },
            bases=("test_alliance_platform_audit.profile",),
        ),
        migrations.CreateModel(
            name="AuthorProfileAuditEvent",
            fields=[
                (
                    "profile_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        related_query_name="+",
                        serialize=False,
                        to="test_alliance_platform_audit.profile",
                    ),
                ),
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("homepage", models.URLField()),
            ],
            options={
                "db_table": "test_alliance_platform_audit_author_profile_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="MemberProfileAuditEvent",
            fields=[
                (
                    "profile_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        related_query_name="+",
                        serialize=False,
                        to="test_alliance_platform_audit.profile",
                    ),
                ),
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("member_id", models.IntegerField()),
            ],
            options={
                "db_table": "test_alliance_platform_audit_member_profile_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "test_alliance_platform_audit_payment_method",
            },
        ),
        migrations.CreateModel(
            name="PaymentMethodAuditEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "test_alliance_platform_audit_payment_method_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="Plaza",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "test_alliance_platform_audit_plaza",
            },
        ),
        migrations.CreateModel(
            name="PlazaAuditEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "test_alliance_platform_audit_plaza_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="ProfileAuditEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "test_alliance_platform_audit_profile_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="Shop",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                (
                    "category",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Grocery"), (2, "Services"), (3, "Department Store"), (0, "Others")],
                        default=0,
                    ),
                ),
            ],
            options={
                "db_table": "test_alliance_platform_audit_shop",
            },
        ),
        migrations.CreateModel(
            name="ShopAuditEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("name", models.CharField(blank=True, max_length=255)),
                (
                    "category",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Grocery"), (2, "Services"), (3, "Department Store"), (0, "Others")],
                        default=0,
                    ),
                ),
                (
                    "payment_methods_accepted",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
            ],
            options={
                "db_table": "test_alliance_platform_audit_shop_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="SuperMemberProfileAuditEvent",
            fields=[
                (
                    "memberprofile_ptr",
                    models.ForeignKey(
                        auto_created=True,
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        parent_link=True,
                        related_name="+",
                        related_query_name="+",
                        serialize=False,
                        to="test_alliance_platform_audit.memberprofile",
                    ),
                ),
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("award_points", models.IntegerField()),
            ],
            options={
                "db_table": "test_alliance_platform_audit_super_member_profile_auditevent",
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="UserAuditEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                (
                    "groups",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
                (
                    "user_permissions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), blank=True, null=True, size=None
                    ),
                ),
            ],
            options={
                "db_table": "test_alliance_platform_audit_custom_user_auditevent",
                "default_permissions": (),
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="profile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_auditd5147c34_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_profile_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."name", NOW(), \'CREATE\', NEW."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="a69c98b7e12a5e99ad3bb51073482eba61e517db",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_auditd5147c34_insert_7fff4",
                    table="test_alliance_platform_audit_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="profile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_auditd5147c34_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_profile_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."name", NOW(), \'UPDATE\', NEW."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="98e4e3418b7f1b9d28934526cee05179701300ad",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_auditd5147c34_update_5107d",
                    table="test_alliance_platform_audit_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="profile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_auditd5147c34_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_profile_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."id", OLD."name", NOW(), \'DELETE\', OLD."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="829a5058775701bf4f46fed2ecf25391a0f94ba3",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_auditd5147c34_delete_603ff",
                    table="test_alliance_platform_audit_profile",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="authorprofileauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="authorprofileauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.authorprofileauditevent",
            ),
        ),
        migrations.AddField(
            model_name="memberprofileauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="memberprofileauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.memberprofileauditevent",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="paymentmethod",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_auditce8b9ad6_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_payment_method_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."name", NOW(), \'CREATE\', NEW."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="51d75b7d8db3da3e32bcbb5899b6cf045d6ff924",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_auditce8b9ad6_insert_b7b0e",
                    table="test_alliance_platform_audit_payment_method",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="paymentmethod",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_auditce8b9ad6_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_payment_method_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."name", NOW(), \'UPDATE\', NEW."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="de08b9fac262113e99ea4592773b16e2fc803be3",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_auditce8b9ad6_update_87eaf",
                    table="test_alliance_platform_audit_payment_method",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="paymentmethod",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_auditce8b9ad6_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_payment_method_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."id", OLD."name", NOW(), \'DELETE\', OLD."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="ec66731cdf837b413001b447784c04455c0ba2e4",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_auditce8b9ad6_delete_cdff8",
                    table="test_alliance_platform_audit_payment_method",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="paymentmethodauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="paymentmethodauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="auditevents",
                to="test_alliance_platform_audit.paymentmethod",
            ),
        ),
        migrations.AddField(
            model_name="paymentmethodauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.paymentmethodauditevent",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="plaza",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_plaza_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_plaza_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."name", NOW(), \'CREATE\', NEW."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="d8a250d72d8d7ab15a61208dab1ebf2f00579969",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audit_plaza_insert_6bf6e",
                    table="test_alliance_platform_audit_plaza",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="plaza",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_plaza_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_plaza_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."id", NEW."name", NOW(), \'UPDATE\', NEW."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="a00542ff4001ec95796d31536651b127e66e857c",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_audit_plaza_update_5d286",
                    table="test_alliance_platform_audit_plaza",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="plaza",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_plaza_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_plaza_auditevent"\n                    ("id", "name", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."id", OLD."name", NOW(), \'DELETE\', OLD."id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="304bc4c198a0a2bb55bfcb244c8b235399459b8f",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_audit_plaza_delete_2138a",
                    table="test_alliance_platform_audit_plaza",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="plazaauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="plazaauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="auditevents",
                to="test_alliance_platform_audit.plaza",
            ),
        ),
        migrations.AddField(
            model_name="plazaauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.plazaauditevent",
            ),
        ),
        migrations.AddField(
            model_name="profileauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="profileauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="profile_auditevents",
                to="test_alliance_platform_audit.profile",
            ),
        ),
        migrations.AddField(
            model_name="profileauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.profileauditevent",
            ),
        ),
        migrations.AddField(
            model_name="shop",
            name="payment_methods_accepted",
            field=models.ManyToManyField(
                blank=True, related_name="shops", to="test_alliance_platform_audit.paymentmethod"
            ),
        ),
        migrations.AddField(
            model_name="shop",
            name="plaza",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="test_alliance_platform_audit.plaza"
            ),
        ),
        migrations.AddField(
            model_name="shopauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="shopauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="auditevents",
                to="test_alliance_platform_audit.shop",
            ),
        ),
        migrations.AddField(
            model_name="shopauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.shopauditevent",
            ),
        ),
        migrations.AddField(
            model_name="shopauditevent",
            name="plaza",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="test_alliance_platform_audit.plaza",
            ),
        ),
        migrations.AddField(
            model_name="supermemberprofileauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="supermemberprofileauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.supermemberprofileauditevent",
            ),
        ),
        migrations.AddField(
            model_name="userauditevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="userauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="user_auditevent",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="userauditevent",
            name="pgh_previous",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="test_alliance_platform_audit.userauditevent",
            ),
        ),
        migrations.CreateModel(
            name="test_alliance_platform_audit_User_groups_AuditEventProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("test_alliance_platform_audit.user_groups",),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="user",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_user_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_custom_user_auditevent"\n                    ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "groups", "user_permissions") VALUES (NEW."id", NEW."password", NEW."last_login", NEW."is_superuser", NEW."username", NEW."first_name", NEW."last_name", NEW."email", NEW."is_staff", NEW."is_active", NEW."date_joined", NOW(), \'CREATE\', NEW."id", _pgh_attach_context(), (\n                SELECT "groups"\n                FROM "test_alliance_platform_audit_custom_user_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = NEW."id"\n                    )\n                ), (\n                SELECT "user_permissions"\n                FROM "test_alliance_platform_audit_custom_user_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = NEW."id"\n                    )\n                ));\n                RETURN NULL;\n            ',
                    hash="fdefa12b15d9bb6ef4df077af0e8cebcd7b7312a",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audit_user_insert_10387",
                    table="test_alliance_platform_audit_custom_user",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="user",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_user_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."password" IS DISTINCT FROM (NEW."password") OR OLD."last_login" IS DISTINCT FROM (NEW."last_login") OR OLD."is_superuser" IS DISTINCT FROM (NEW."is_superuser") OR OLD."username" IS DISTINCT FROM (NEW."username") OR OLD."first_name" IS DISTINCT FROM (NEW."first_name") OR OLD."last_name" IS DISTINCT FROM (NEW."last_name") OR OLD."email" IS DISTINCT FROM (NEW."email") OR OLD."is_staff" IS DISTINCT FROM (NEW."is_staff") OR OLD."is_active" IS DISTINCT FROM (NEW."is_active") OR OLD."date_joined" IS DISTINCT FROM (NEW."date_joined"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_custom_user_auditevent"\n                    ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "groups", "user_permissions") VALUES (NEW."id", NEW."password", NEW."last_login", NEW."is_superuser", NEW."username", NEW."first_name", NEW."last_name", NEW."email", NEW."is_staff", NEW."is_active", NEW."date_joined", NOW(), \'UPDATE\', NEW."id", _pgh_attach_context(), (\n                SELECT "groups"\n                FROM "test_alliance_platform_audit_custom_user_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = NEW."id"\n                    )\n                ), (\n                SELECT "user_permissions"\n                FROM "test_alliance_platform_audit_custom_user_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = NEW."id"\n                    )\n                ));\n                RETURN NULL;\n            ',
                    hash="4ff3005ac48f04bd05e6b1a0dc458d0cff61b6e9",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_audit_user_update_a9f52",
                    table="test_alliance_platform_audit_custom_user",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="user",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_user_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_custom_user_auditevent"\n                    ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "groups", "user_permissions") VALUES (OLD."id", OLD."password", OLD."last_login", OLD."is_superuser", OLD."username", OLD."first_name", OLD."last_name", OLD."email", OLD."is_staff", OLD."is_active", OLD."date_joined", NOW(), \'DELETE\', OLD."id", _pgh_attach_context(), (\n                SELECT "groups"\n                FROM "test_alliance_platform_audit_custom_user_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = OLD."id"\n                    )\n                ), (\n                SELECT "user_permissions"\n                FROM "test_alliance_platform_audit_custom_user_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = OLD."id"\n                    )\n                ));\n                RETURN NULL;\n            ',
                    hash="ebd48dc9ed7704bbaab6b78485978e5be8419a3f",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_audit_user_delete_a277e",
                    table="test_alliance_platform_audit_custom_user",
                    when="AFTER",
                ),
            ),
        ),
        migrations.CreateModel(
            name="test_alliance_platform_audit_User_user_permissions_AuditEventProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("test_alliance_platform_audit.user_user_permissions",),
        ),
        migrations.AddField(
            model_name="authorprofileauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="author_auditevents",
                to="test_alliance_platform_audit.authorprofile",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="authorprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit5cdce0d6_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_author_profile_auditevent"\n                    ("profile_ptr_id", "homepage", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."profile_ptr_id", NEW."homepage", NOW(), \'CREATE\', NEW."profile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="37229bf4eb9b967ecfa8e3297085896f31adc2ea",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audit5cdce0d6_insert_bb96a",
                    table="test_alliance_platform_audit_author_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="authorprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit5cdce0d6_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."profile_ptr_id" IS DISTINCT FROM (NEW."profile_ptr_id") OR OLD."homepage" IS DISTINCT FROM (NEW."homepage"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_author_profile_auditevent"\n                    ("profile_ptr_id", "homepage", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."profile_ptr_id", NEW."homepage", NOW(), \'UPDATE\', NEW."profile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="54801ffaa2f7328dbc8bcbfb920bb52df153b14e",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_audit5cdce0d6_update_a652d",
                    table="test_alliance_platform_audit_author_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="authorprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit5cdce0d6_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_author_profile_auditevent"\n                    ("profile_ptr_id", "homepage", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."profile_ptr_id", OLD."homepage", NOW(), \'DELETE\', OLD."profile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="a5474899fe54625cfadec8b75ddebe511591c181",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_audit5cdce0d6_delete_4b37f",
                    table="test_alliance_platform_audit_author_profile",
                    when="AFTER",
                ),
            ),
        ),
        migrations.CreateModel(
            name="SuperMemberProfile",
            fields=[
                (
                    "memberprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="test_alliance_platform_audit.memberprofile",
                    ),
                ),
                ("award_points", models.IntegerField()),
            ],
            options={
                "db_table": "test_alliance_platform_audit_super_member_profile",
            },
            bases=("test_alliance_platform_audit.memberprofile",),
        ),
        migrations.AddField(
            model_name="memberprofileauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="member_events",
                to="test_alliance_platform_audit.memberprofile",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="memberprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit921bdb3e_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_member_profile_auditevent"\n                    ("profile_ptr_id", "member_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."profile_ptr_id", NEW."member_id", NOW(), \'CREATE\', NEW."profile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="1634e16b9c958c669f2b76af7c12135304cf2cb7",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audit921bdb3e_insert_dbb71",
                    table="test_alliance_platform_audit_member_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="memberprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit921bdb3e_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."profile_ptr_id" IS DISTINCT FROM (NEW."profile_ptr_id") OR OLD."member_id" IS DISTINCT FROM (NEW."member_id"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_member_profile_auditevent"\n                    ("profile_ptr_id", "member_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."profile_ptr_id", NEW."member_id", NOW(), \'UPDATE\', NEW."profile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="abf5e72802110330cf9e04ae9633e86634ae10e9",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_audit921bdb3e_update_36c00",
                    table="test_alliance_platform_audit_member_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="memberprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit921bdb3e_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_member_profile_auditevent"\n                    ("profile_ptr_id", "member_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."profile_ptr_id", OLD."member_id", NOW(), \'DELETE\', OLD."profile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="dfe7c422016a3f53a2c4eb4fc70b97e162c2d9f3",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_audit921bdb3e_delete_e830d",
                    table="test_alliance_platform_audit_member_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="paymentmethodauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platformce8b9ad6_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_payment_method_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="0ee3bbe78cfd9612ac4887b20645177795b3ee8c",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platformce8b9ad6_set_previous_9ec8c",
                    table="test_alliance_platform_audit_payment_method_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="plazaauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform4b7167ba_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_plaza_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="8579890356820f323122fee9963a52e160ca4ba3",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform4b7167ba_set_previous_474d1",
                    table="test_alliance_platform_audit_plaza_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="profileauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platformd5147c34_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_profile_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="19181a2f409457c7aee29f5c7b30238d9345df98",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platformd5147c34_set_previous_39d98",
                    table="test_alliance_platform_audit_profile_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        migrations.CreateModel(
            name="test_alliance_platform_audit_Shop_payment_methods_accepted_AuditEventProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("test_alliance_platform_audit.shop_payment_methods_accepted",),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="shop",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_shop_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_shop_auditevent"\n                    ("id", "name", "plaza_id", "category", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "payment_methods_accepted") VALUES (NEW."id", NEW."name", NEW."plaza_id", NEW."category", NOW(), \'CREATE\', NEW."id", _pgh_attach_context(), (\n                SELECT "payment_methods_accepted"\n                FROM "test_alliance_platform_audit_shop_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_shop_auditevent where pgh_obj_id = NEW."id"\n                    )\n                ));\n                RETURN NULL;\n            ',
                    hash="0a157788e24f0495c7e3dde246364a1f14a15515",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audit_shop_insert_4936c",
                    table="test_alliance_platform_audit_shop",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="shop",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_shop_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."name" IS DISTINCT FROM (NEW."name") OR OLD."plaza_id" IS DISTINCT FROM (NEW."plaza_id") OR OLD."category" IS DISTINCT FROM (NEW."category"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_shop_auditevent"\n                    ("id", "name", "plaza_id", "category", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "payment_methods_accepted") VALUES (NEW."id", NEW."name", NEW."plaza_id", NEW."category", NOW(), \'UPDATE\', NEW."id", _pgh_attach_context(), (\n                SELECT "payment_methods_accepted"\n                FROM "test_alliance_platform_audit_shop_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_shop_auditevent where pgh_obj_id = NEW."id"\n                    )\n                ));\n                RETURN NULL;\n            ',
                    hash="15ef679de3d5e72c201741913ef4b91f7600dfe6",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_audit_shop_update_ae90d",
                    table="test_alliance_platform_audit_shop",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="shop",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit_shop_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_shop_auditevent"\n                    ("id", "name", "plaza_id", "category", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "payment_methods_accepted") VALUES (OLD."id", OLD."name", OLD."plaza_id", OLD."category", NOW(), \'DELETE\', OLD."id", _pgh_attach_context(), (\n                SELECT "payment_methods_accepted"\n                FROM "test_alliance_platform_audit_shop_auditevent"\n                WHERE pgh_id=(\n                    SELECT max(pgh_id) from test_alliance_platform_audit_shop_auditevent where pgh_obj_id = OLD."id"\n                    )\n                ));\n                RETURN NULL;\n            ',
                    hash="011d80b1c13dd60bb8c82f16b742cda86a29af69",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_audit_shop_delete_66752",
                    table="test_alliance_platform_audit_shop",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="shopauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform03cf0cec_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_shop_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="597feb60aac60ec29fce3f2fb8d77bb36122b0d2",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform03cf0cec_set_previous_dc526",
                    table="test_alliance_platform_audit_shop_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform1efb1c9f_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_custom_user_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="dbcb67b8f2b109e4d57c65701a1f3647b18220ae",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform1efb1c9f_set_previous_692d9",
                    table="test_alliance_platform_audit_custom_user_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="test_alliance_platform_audit_user_groups_auditeventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audi96e61f56_m2m_add",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                        INSERT INTO "test_alliance_platform_audit_custom_user_auditevent" ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "user_permissions", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "groups")\n                            SELECT "id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "user_permissions", NOW(), \'UPDATE\', NEW."user_id", _pgh_attach_context(), (\n                                SELECT array_agg("group_id")\n                                FROM test_alliance_platform_audit_custom_user_groups\n                                WHERE user_id=NEW."user_id"\n                            )\n                            FROM "test_alliance_platform_audit_custom_user_auditevent"\n                            WHERE pgh_obj_id=NEW."user_id"\n                            ORDER BY pgh_id DESC\n                            LIMIT 1;\n                        RETURN NULL;\n                    ',
                    hash="9326e4668841342259f407004b54c8960f54b036",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audi96e61f56_m2m_add_e61de",
                    table="test_alliance_platform_audit_custom_user_groups",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="test_alliance_platform_audit_user_groups_auditeventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_a96e61f56_m2m_remove",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                        INSERT INTO "test_alliance_platform_audit_custom_user_auditevent" ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "user_permissions", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "groups")\n                            SELECT "id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "user_permissions", NOW(), \'UPDATE\', OLD."user_id", _pgh_attach_context(), (\n                                SELECT array_agg("group_id")\n                                FROM test_alliance_platform_audit_custom_user_groups\n                                WHERE user_id=OLD."user_id"\n                            )\n                            FROM "test_alliance_platform_audit_custom_user_auditevent"\n                            WHERE pgh_obj_id=OLD."user_id"\n                            ORDER BY pgh_id DESC\n                            LIMIT 1;\n                        RETURN NULL;\n                    ',
                    hash="dc4ea62cd317eea97ba0563d77a0e0d676dc9813",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_a96e61f56_m2m_remove_d45e0",
                    table="test_alliance_platform_audit_custom_user_groups",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="test_alliance_platform_audit_user_user_permissions_auditeventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audi676b1ed6_m2m_add",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                        INSERT INTO "test_alliance_platform_audit_custom_user_auditevent" ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "groups", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "user_permissions")\n                            SELECT "id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "groups", NOW(), \'UPDATE\', NEW."user_id", _pgh_attach_context(), (\n                                SELECT array_agg("permission_id")\n                                FROM test_alliance_platform_audit_custom_user_user_permissions\n                                WHERE user_id=NEW."user_id"\n                            )\n                            FROM "test_alliance_platform_audit_custom_user_auditevent"\n                            WHERE pgh_obj_id=NEW."user_id"\n                            ORDER BY pgh_id DESC\n                            LIMIT 1;\n                        RETURN NULL;\n                    ',
                    hash="f17832c284556f51f490114592d1f33b03200372",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audi676b1ed6_m2m_add_e456d",
                    table="test_alliance_platform_audit_custom_user_user_permissions",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="test_alliance_platform_audit_user_user_permissions_auditeventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_a676b1ed6_m2m_remove",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                        INSERT INTO "test_alliance_platform_audit_custom_user_auditevent" ("id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "groups", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "user_permissions")\n                            SELECT "id", "password", "last_login", "is_superuser", "username", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "groups", NOW(), \'UPDATE\', OLD."user_id", _pgh_attach_context(), (\n                                SELECT array_agg("permission_id")\n                                FROM test_alliance_platform_audit_custom_user_user_permissions\n                                WHERE user_id=OLD."user_id"\n                            )\n                            FROM "test_alliance_platform_audit_custom_user_auditevent"\n                            WHERE pgh_obj_id=OLD."user_id"\n                            ORDER BY pgh_id DESC\n                            LIMIT 1;\n                        RETURN NULL;\n                    ',
                    hash="31e8a723db979ff4088b5823dfdbe7172594edf4",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_a676b1ed6_m2m_remove_59396",
                    table="test_alliance_platform_audit_custom_user_user_permissions",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="authorprofileauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform5cdce0d6_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_author_profile_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="0de8ebd1c62d3799731edefae3a97734a3c44754",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform5cdce0d6_set_previous_0ac19",
                    table="test_alliance_platform_audit_author_profile_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        migrations.AddField(
            model_name="supermemberprofileauditevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="super_member_auditevents",
                to="test_alliance_platform_audit.supermemberprofile",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="supermemberprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit8be679c8_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_super_member_profile_auditevent"\n                    ("memberprofile_ptr_id", "award_points", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."memberprofile_ptr_id", NEW."award_points", NOW(), \'CREATE\', NEW."memberprofile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="853b71fb5c3bef78d810bc4e2020821121b47dfd",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audit8be679c8_insert_71455",
                    table="test_alliance_platform_audit_super_member_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="supermemberprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit8be679c8_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."memberprofile_ptr_id" IS DISTINCT FROM (NEW."memberprofile_ptr_id") OR OLD."award_points" IS DISTINCT FROM (NEW."award_points"))',
                    func='\n                INSERT INTO "test_alliance_platform_audit_super_member_profile_auditevent"\n                    ("memberprofile_ptr_id", "award_points", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (NEW."memberprofile_ptr_id", NEW."award_points", NOW(), \'UPDATE\', NEW."memberprofile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="5914f943d347dc1817bacfa05b326d1eb8e79355",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platform_audit8be679c8_update_4ca6f",
                    table="test_alliance_platform_audit_super_member_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="supermemberprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audit8be679c8_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                INSERT INTO "test_alliance_platform_audit_super_member_profile_auditevent"\n                    ("memberprofile_ptr_id", "award_points", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id") VALUES (OLD."memberprofile_ptr_id", OLD."award_points", NOW(), \'DELETE\', OLD."memberprofile_ptr_id", _pgh_attach_context());\n                RETURN NULL;\n            ',
                    hash="24da64125b2bbbf5e0c99435fe05f2ffa897a9e4",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_audit8be679c8_delete_3fae6",
                    table="test_alliance_platform_audit_super_member_profile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="memberprofileauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform921bdb3e_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_member_profile_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="07605ac9e7159c698f6ebb5e0c6812aa7a65e8de",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform921bdb3e_set_previous_5e2b7",
                    table="test_alliance_platform_audit_member_profile_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="test_alliance_platform_audit_shop_payment_methods_accepted_auditeventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_audic6180f31_m2m_add",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                        INSERT INTO "test_alliance_platform_audit_shop_auditevent" ("id", "name", "plaza_id", "category", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "payment_methods_accepted")\n                            SELECT "id", "name", "plaza_id", "category", NOW(), \'UPDATE\', NEW."shop_id", _pgh_attach_context(), (\n                                SELECT array_agg("paymentmethod_id")\n                                FROM test_alliance_platform_audit_shop_payment_methods_accepted\n                                WHERE shop_id=NEW."shop_id"\n                            )\n                            FROM "test_alliance_platform_audit_shop_auditevent"\n                            WHERE pgh_obj_id=NEW."shop_id"\n                            ORDER BY pgh_id DESC\n                            LIMIT 1;\n                        RETURN NULL;\n                    ',
                    hash="1beb5c9bcaf1d7706458bc54d6cbc4668fc4e433",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform_audic6180f31_m2m_add_b1ac9",
                    table="test_alliance_platform_audit_shop_payment_methods_accepted",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="test_alliance_platform_audit_shop_payment_methods_accepted_auditeventproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform_ac6180f31_m2m_remove",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n                        INSERT INTO "test_alliance_platform_audit_shop_auditevent" ("id", "name", "plaza_id", "category", "pgh_created_at", "pgh_label", "pgh_obj_id", "pgh_context_id", "payment_methods_accepted")\n                            SELECT "id", "name", "plaza_id", "category", NOW(), \'UPDATE\', OLD."shop_id", _pgh_attach_context(), (\n                                SELECT array_agg("paymentmethod_id")\n                                FROM test_alliance_platform_audit_shop_payment_methods_accepted\n                                WHERE shop_id=OLD."shop_id"\n                            )\n                            FROM "test_alliance_platform_audit_shop_auditevent"\n                            WHERE pgh_obj_id=OLD."shop_id"\n                            ORDER BY pgh_id DESC\n                            LIMIT 1;\n                        RETURN NULL;\n                    ',
                    hash="164cdeefd7630cde362abe7f2f8014352f8c4da1",
                    operation="DELETE",
                    pgid="pgtrigger_test_alliance_platform_ac6180f31_m2m_remove_b9cab",
                    table="test_alliance_platform_audit_shop_payment_methods_accepted",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="supermemberprofileauditevent",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platform8be679c8_set_previous",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="NEW.pgh_previous_id = (SELECT max(pgh_id) from test_alliance_platform_audit_super_member_profile_auditevent where pgh_obj_id = NEW.pgh_obj_id); RETURN NEW;",
                    hash="f201e57ff48a9e24319cb146d16bc8cfb1d10505",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platform8be679c8_set_previous_a3114",
                    table="test_alliance_platform_audit_super_member_profile_auditevent",
                    when="BEFORE",
                ),
            ),
        ),
    ]
