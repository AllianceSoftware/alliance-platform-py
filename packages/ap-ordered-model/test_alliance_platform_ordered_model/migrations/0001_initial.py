# Generated by Django 5.1.7 on 2025-04-01 23:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations
from django.db import models
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Franchise",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "test_alliance_platform_ordered_model_franchise",
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "test_alliance_platform_ordered_model_payment_method",
            },
        ),
        migrations.CreateModel(
            name="Plaza",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("sort_key", models.PositiveIntegerField(blank=True)),
            ],
            options={
                "db_table": "test_alliance_platform_ordered_model_plaza",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Shop",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                (
                    "category",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Grocery"), (2, "Services"), (3, "Department Store"), (0, "Others")],
                        default=0,
                    ),
                ),
                ("sort_key", models.PositiveIntegerField(blank=True)),
            ],
            options={
                "db_table": "test_alliance_platform_ordered_model_shop",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "test_alliance_platform_ordered_model_custom_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="FranchiseLocation",
            fields=[
                (
                    "id",
                    models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("sort_key", models.PositiveIntegerField(blank=True)),
                (
                    "franchise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="test_alliance_platform_ordered_model.franchise",
                    ),
                ),
                (
                    "plaza",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="test_alliance_platform_ordered_model.plaza",
                    ),
                ),
            ],
            options={
                "db_table": "test_alliance_platform_ordered_model_franchise_location",
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="plaza",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platfoab4bb6ceinsert_sort_key",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."sort_key" IS NULL)',
                    func="\n                    NEW.sort_key = (SELECT COALESCE(max(\"sort_key\"), 0) + 2 FROM test_alliance_platform_ordered_model_plaza );\n                    \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_plaza' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || 'null'\n               || '}'               );\n        \n                    RETURN NEW;\n                ",
                    hash="efdf14b3069a6cf5b4b4b3778b1f5b6ad1bc93f0",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platfoab4bb6ceinsert_sort_key_b6e37",
                    table="test_alliance_platform_ordered_model_plaza",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="plaza",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platfoab4bb6ceupdate_sort_key",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n                 -- This setting is used to prevent recursion; we don't want the trigger to run again due to an update within the triggger\n                 IF current_setting('x.' || TG_NAME, true) = '1' THEN\n                  RETURN NULL;\n                 END IF;\n                 PERFORM set_config('x.' || TG_NAME, '1', true);\n                 \n                IF (SELECT COUNT(*) FROM new_values\n                    INNER JOIN old_values ON new_values.\"id\" = old_values.\"id\"\n                    WHERE old_values.\"sort_key\" IS DISTINCT FROM new_values.\"sort_key\")\n                THEN\n                    \n           UPDATE test_alliance_platform_ordered_model_plaza SET \"sort_key\" = t.rn FROM (\n             SELECT \"id\", row_number() OVER (ORDER BY \"sort_key\") * 2 as rn\n             FROM \"test_alliance_platform_ordered_model_plaza\" None\n           ) t\n           WHERE t.\"id\" = \"test_alliance_platform_ordered_model_plaza\".\"id\";\n        \n                    \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_plaza' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || 'null'\n               || '}'               );\n        \n                END IF;\n            \n                 PERFORM set_config('x.' || TG_NAME, '', true);\n                 RETURN NULL;\n                ",
                    hash="97a0bd67d45ae0dbae6b3831af1ca17cb172a951",
                    level="STATEMENT",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platfoab4bb6ceupdate_sort_key_19606",
                    referencing="REFERENCING OLD TABLE AS old_values  NEW TABLE AS new_values ",
                    table="test_alliance_platform_ordered_model_plaza",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="shop",
            name="payment_methods_accepted",
            field=models.ManyToManyField(
                blank=True, related_name="shops", to="test_alliance_platform_ordered_model.paymentmethod"
            ),
        ),
        migrations.AddField(
            model_name="shop",
            name="plaza",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="test_alliance_platform_ordered_model.plaza"
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="franchiselocation",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platfo2c7e02a5insert_sort_key",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."sort_key" IS NULL)',
                    func="\n                    NEW.sort_key = (SELECT COALESCE(max(\"sort_key\"), 0) + 2 FROM test_alliance_platform_ordered_model_franchise_location WHERE \"franchise_id\" = NEW.\"franchise_id\"AND \"plaza_id\" = NEW.\"plaza_id\");\n                    \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_franchise_location' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || \n               (SELECT json_build_object('franchise', NEW.\"franchise_id\",'plaza', NEW.\"plaza_id\"))\n            \n               || '}'               );\n        \n                    RETURN NEW;\n                ",
                    hash="08a92a8b5edf06409d5a6605ef7a7cd3d41032c3",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platfo2c7e02a5insert_sort_key_0694f",
                    table="test_alliance_platform_ordered_model_franchise_location",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="franchiselocation",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platfo2c7e02a5update_sort_key",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n                 -- This setting is used to prevent recursion; we don't want the trigger to run again due to an update within the triggger\n                 IF current_setting('x.' || TG_NAME, true) = '1' THEN\n                  RETURN NULL;\n                 END IF;\n                 PERFORM set_config('x.' || TG_NAME, '1', true);\n                 \n                declare\n                    row record;\n                begin\n                    -- for all distinct values for order_with_respect that have some records where\n                    -- the order_field_name has changed run the update and send any notifications\n                    for row in SELECT DISTINCT new_values.franchise_id, old_values.franchise_id AS old_franchise_id, new_values.plaza_id, old_values.plaza_id AS old_plaza_id, old_values.franchise_id IS DISTINCT FROM new_values.franchise_id OR old_values.plaza_id IS DISTINCT FROM new_values.plaza_id AS _has_order_with_respect_to_changed\n                               FROM new_values\n                             INNER JOIN old_values ON new_values.\"id\" = old_values.\"id\"\n                             -- if nothing has changed don't do anything\n                             WHERE\n                                -- ordering key changed\n                                old_values.\"sort_key\" IS DISTINCT FROM new_values.\"sort_key\"\n                                -- or one of the order_with_respect_to values changed\n                                OR old_values.franchise_id IS DISTINCT FROM new_values.franchise_id OR old_values.plaza_id IS DISTINCT FROM new_values.plaza_id\n                             -- order by for consistency in notification order\n                             ORDER BY new_values.franchise_id, new_values.plaza_id\n                        loop\n                        -- Items have moved from one grouping to another - this updates & runs notifications for the _old_ grouping\n                        IF row._has_order_with_respect_to_changed THEN\n                            \n           UPDATE test_alliance_platform_ordered_model_franchise_location SET \"sort_key\" = t.rn FROM (\n             SELECT \"id\", row_number() OVER (ORDER BY \"sort_key\") * 2 as rn\n             FROM \"test_alliance_platform_ordered_model_franchise_location\" WHERE \"franchise_id\" = row.\"old_franchise_id\"AND \"plaza_id\" = row.\"old_plaza_id\"\n           ) t\n           WHERE t.\"id\" = \"test_alliance_platform_ordered_model_franchise_location\".\"id\";\n        \n                            \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_franchise_location' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || \n               (SELECT json_build_object('franchise', row.\"old_franchise_id\",'plaza', row.\"old_plaza_id\"))\n            \n               || '}'               );\n        \n                        END IF;\n                        \n           UPDATE test_alliance_platform_ordered_model_franchise_location SET \"sort_key\" = t.rn FROM (\n             SELECT \"id\", row_number() OVER (ORDER BY \"sort_key\") * 2 as rn\n             FROM \"test_alliance_platform_ordered_model_franchise_location\" WHERE \"franchise_id\" = row.\"franchise_id\"AND \"plaza_id\" = row.\"plaza_id\"\n           ) t\n           WHERE t.\"id\" = \"test_alliance_platform_ordered_model_franchise_location\".\"id\";\n        \n                        \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_franchise_location' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || \n               (SELECT json_build_object('franchise', row.\"franchise_id\",'plaza', row.\"plaza_id\"))\n            \n               || '}'               );\n        \n                        end loop;\n                end;\n            \n                 PERFORM set_config('x.' || TG_NAME, '', true);\n                 RETURN NULL;\n                ",
                    hash="b59096b0020cb9364382083c401005781be01c9c",
                    level="STATEMENT",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platfo2c7e02a5update_sort_key_9b95b",
                    referencing="REFERENCING OLD TABLE AS old_values  NEW TABLE AS new_values ",
                    table="test_alliance_platform_ordered_model_franchise_location",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="shop",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platfo4235e4f6insert_sort_key",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."sort_key" IS NULL)',
                    func="\n                    NEW.sort_key = (SELECT COALESCE(max(\"sort_key\"), 0) + 2 FROM test_alliance_platform_ordered_model_shop WHERE \"plaza_id\" = NEW.\"plaza_id\");\n                    \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_shop' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || \n               (SELECT json_build_object('plaza', NEW.\"plaza_id\"))\n            \n               || '}'               );\n        \n                    RETURN NEW;\n                ",
                    hash="5a5eae82997b592438c4efde1d10f87e80323282",
                    operation="INSERT",
                    pgid="pgtrigger_test_alliance_platfo4235e4f6insert_sort_key_986a0",
                    table="test_alliance_platform_ordered_model_shop",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="shop",
            trigger=pgtrigger.compiler.Trigger(
                name="test_alliance_platfo4235e4f6update_sort_key",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n                 -- This setting is used to prevent recursion; we don't want the trigger to run again due to an update within the triggger\n                 IF current_setting('x.' || TG_NAME, true) = '1' THEN\n                  RETURN NULL;\n                 END IF;\n                 PERFORM set_config('x.' || TG_NAME, '1', true);\n                 \n                declare\n                    row record;\n                begin\n                    -- for all distinct values for order_with_respect that have some records where\n                    -- the order_field_name has changed run the update and send any notifications\n                    for row in SELECT DISTINCT new_values.plaza_id, old_values.plaza_id AS old_plaza_id, old_values.plaza_id IS DISTINCT FROM new_values.plaza_id AS _has_order_with_respect_to_changed\n                               FROM new_values\n                             INNER JOIN old_values ON new_values.\"id\" = old_values.\"id\"\n                             -- if nothing has changed don't do anything\n                             WHERE\n                                -- ordering key changed\n                                old_values.\"sort_key\" IS DISTINCT FROM new_values.\"sort_key\"\n                                -- or one of the order_with_respect_to values changed\n                                OR old_values.plaza_id IS DISTINCT FROM new_values.plaza_id\n                             -- order by for consistency in notification order\n                             ORDER BY new_values.plaza_id\n                        loop\n                        -- Items have moved from one grouping to another - this updates & runs notifications for the _old_ grouping\n                        IF row._has_order_with_respect_to_changed THEN\n                            \n           UPDATE test_alliance_platform_ordered_model_shop SET \"sort_key\" = t.rn FROM (\n             SELECT \"id\", row_number() OVER (ORDER BY \"sort_key\") * 2 as rn\n             FROM \"test_alliance_platform_ordered_model_shop\" WHERE \"plaza_id\" = row.\"old_plaza_id\"\n           ) t\n           WHERE t.\"id\" = \"test_alliance_platform_ordered_model_shop\".\"id\";\n        \n                            \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_shop' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || \n               (SELECT json_build_object('plaza', row.\"old_plaza_id\"))\n            \n               || '}'               );\n        \n                        END IF;\n                        \n           UPDATE test_alliance_platform_ordered_model_shop SET \"sort_key\" = t.rn FROM (\n             SELECT \"id\", row_number() OVER (ORDER BY \"sort_key\") * 2 as rn\n             FROM \"test_alliance_platform_ordered_model_shop\" WHERE \"plaza_id\" = row.\"plaza_id\"\n           ) t\n           WHERE t.\"id\" = \"test_alliance_platform_ordered_model_shop\".\"id\";\n        \n                        \n           PERFORM pg_notify('test_alliance_platform_ordered_model_notifications',\n            '{'\n               || '\"timestamp\":\"'            || CURRENT_TIMESTAMP      || '\",'\n               || '\"notification_type\":\"'    || 'ORDERING'             || '\",'\n               || '\"operation\":\"'            || TG_OP                   || '\",'\n               || '\"schema\":\"'               || current_schema()       || '\",'\n               || '\"table\":\"'                || 'test_alliance_platform_ordered_model_shop' || '\",'\n               || '\"originator_id\":\"'        || (SELECT COALESCE((SELECT NULLIF(CURRENT_SETTING('pghistory.context_metadata', 't'), ''))::json->>'originator_id', '')) || '\",'\n               || '\"order_with_respect_to\":' || \n               (SELECT json_build_object('plaza', row.\"plaza_id\"))\n            \n               || '}'               );\n        \n                        end loop;\n                end;\n            \n                 PERFORM set_config('x.' || TG_NAME, '', true);\n                 RETURN NULL;\n                ",
                    hash="634fae64e9ea1bcae54d27bbed5845ab11beff67",
                    level="STATEMENT",
                    operation="UPDATE",
                    pgid="pgtrigger_test_alliance_platfo4235e4f6update_sort_key_f8672",
                    referencing="REFERENCING OLD TABLE AS old_values  NEW TABLE AS new_values ",
                    table="test_alliance_platform_ordered_model_shop",
                    when="AFTER",
                ),
            ),
        ),
    ]
